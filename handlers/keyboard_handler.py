import os
import random

from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.types import InputFile, ReplyKeyboardRemove, CallbackQuery
from aiogram.utils.exceptions import MessageNotModified

from keyboards.main_kb import main_keyboard
from keyboards.result_kb import result_keyboard

# Path to main directory project
path = os.path.join(os.path.abspath(os.path.dirname(__file__)))[:-8]

num_review = 0


# Function choice. If file have extension 'jpg', send photo. Or if extension is 'mp4', send video.
async def choice_send_review(num_of_list: int, list_of_reviews: list, callback: CallbackQuery) -> CallbackQuery:
    if list_of_reviews[num_of_list].endswith('jpg'):
        type_file = 'photo'
    else:
        type_file = 'video'
    return await callback.message.edit_media(
        types.InputMedia(media=open(path + 'data/reviews/' + list_of_reviews[num_of_list], 'rb'),
                         type=type_file,
                         caption='–ù–∞–∂–º–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá\n'
                         ),
        reply_markup=result_keyboard)


# Parsing only FILE NAMES with EXTENSION from directory to list
def parsing_reviews(path_dir, ext=True) -> list:
    files_list = []
    for directory, list_dirs, files in os.walk(path_dir):
        for file in files:
            if ext:
                files_list.append(file)
            elif ext in file:
                files_list.append(file)

    return files_list


async def cmd_start(message: types.Message) -> None:
    await message.answer(text=f'{message.chat.first_name} –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!',
                         reply_markup=main_keyboard)


async def cmd_price(message: types.Message) -> None:
    text = ["–¶–µ–Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è!",
            "\nüî•üî•üî•üî•\n\n–î–∏–≤–∞–Ω - 1700 —Ä—É–±.",
            "\n–ö—Ä–µ—Å–ª–æ - 400 —Ä—É–±.\n",
            "–ú–∞—Ç—Ä–∞—Å 2-—Ö —Å–ø–∞–ª—å–Ω—ã–π - 1200 —Ä—É–±.\n",
            "–ú–∞—Ç—Ä–∞—Å 1- 1,5 —Å–ø–∞–ª—å–Ω—ã–π 600 —Ä—É–±.\n",
            "–°—Ç—É–ª –æ–±—ã—á–Ω—ã–π - 150 —Ä—É–±.\n\n",
            "–•–∏–º—á–∏—Å—Ç–∫—É –∫–æ–≤—Ä–æ–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º. –ï—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ —á–∏—Å—Ç–∫–µ –∫–æ–≤—Ä–æ–≤, –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Ç—É–¥–∞."]
    await message.answer('\n'.join(text))
    await message.delete()


async def cmd_contacts(message: types.Message) -> None:
    text = [
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
        "<b>–ù–æ–º–µ—Ä:</b> +7 (999) 601-47-37\n"
        "<b>–ü–æ—á—Ç–∞:</b> Kharyushina1995@mail.ru\n"
        "<b>–ò–Ω—Å—Ç–∞–≥—Ä–∞–º:</b> https://www.instagram.com/astr_wash_and_go/\n"
        "<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> https://t.me/astr_wash_and_go\n\n"
        "–í–≤–∏–¥—É —Ç–æ–≥–æ, —á—Ç–æ —á–∞—Å—Ç–æ –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ —à—É–º–∏—Ç –ø—ã–ª–µ—Å–æ—Å, \n"
        "–º–æ–≥—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞—à –∑–≤–æ–Ω–æ–∫. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ç–∞–º —è –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É üòâ"]
    await message.answer('\n'.join(text))
    await message.delete()


async def cmd_about(message: types.Message) -> None:
    text = [
        "üëâ–î–∏–≤–∞–Ω —Å–æ—Ö–Ω–µ—Ç –ø–æ—Å–ª–µ —Ö–∏–º—á–∏—Å—Ç–∫–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º 8-10 —á–∞—Å–æ–≤ –≤ –∑–∏–º–Ω–µ–µ –≤—Ä–µ–º—è, –∏ –≤ —Å—Ä–µ–¥–Ω–µ–º 4-5 —á–∞—Å–æ–≤ –≤ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è.\n\n"
        "üëâ–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ö–∏–º—á–∏—Å—Ç–∫–∏ –¥–∏–≤–∞–Ω–∞ 1,5-2 —á–∞—Å–∞, –º–Ω–æ–≥–æ–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç "
        "–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ—Å—Ç–∏, –æ–±—ä–µ–º–∞ –¥–∏–≤–∞–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—É—à–µ–∫.\n\n"
        "üëâ–ö—Ä–µ—Å–ª–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 30 –º–∏–Ω—É—Ç, –æ–ø—è—Ç—å –∂–µ –º–Ω–æ–≥–æ–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
        "üëâ–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—É–ª–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 15 –º–∏–Ω—É—Ç\n\n"
        "üëâ–ß–∏—Å—Ç–∫–∞ –¥–≤—É—Å–ø–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç—Ä–∞—Å–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 1-1.5 —á–∞—Å–∞.", ]
    await message.answer('\n'.join(text))
    await message.delete()


async def cmd_reviews(message: types.Message) -> None:
    await message.answer(text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ—Ç–∑—ã–≤–æ–≤ –æ —Ä–∞–±–æ—Ç–µ!\n',
                         reply_markup=ReplyKeyboardRemove())
    await message.answer_photo(photo=InputFile(path + 'data/reviews/12.jpg'),
                               caption='–ù–∞–∂–º–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá\n\n'
                                       '–≠—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤!',
                               reply_markup=result_keyboard)

    await message.delete()


async def result_cb_handler(callback: types.CallbackQuery) -> None:
    all_reviews = parsing_reviews(path + 'data/reviews')
    global num_review
    if callback.data == 'first_review':
        num_review = 0
        await callback.message.edit_media(
            types.InputMedia(media=open(path + 'data/reviews/' + all_reviews[num_review], 'rb'),
                             type='video',
                             caption='–≠—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤!\n'
                                     '–ù–∞–∂–º–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá\n'
                             ),
            reply_markup=result_keyboard)
    elif callback.data == 'rand_review':
        rand_review = random.randint(0, len(all_reviews) - 1)
        await choice_send_review(rand_review, all_reviews, callback)
    elif callback.data == 'next_review':
        if num_review == len(all_reviews) - 1:
            num_review = 0
        else:
            num_review += 1
        await choice_send_review(num_review, all_reviews, callback)
    elif callback.data == 'previous_review':
        if num_review == -len(all_reviews):
            num_review = -1
        else:
            num_review -= 1
        await choice_send_review(num_review, all_reviews, callback)
    elif callback.data == 'cancel_review':
        await callback.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                      reply_markup=main_keyboard)
        await callback.message.delete()
        await callback.answer()


async def error_double_send(update: types.Update, exception: MessageNotModified) -> bool:
    print("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è!")
    return True


def register_all_keyboard_handler(dp: Dispatcher) -> None:
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(cmd_price, Text('–¶–µ–Ω–∞'))
    dp.register_message_handler(cmd_contacts, Text('–ö–æ–Ω—Ç–∞–∫—Ç—ã'))
    dp.register_message_handler(cmd_about, Text('–£—Å–ª—É–≥–∏'))
    dp.register_message_handler(cmd_reviews, Text('–û—Ç–∑—ã–≤—ã'))
    dp.register_callback_query_handler(result_cb_handler, lambda callback_query: callback_query.data.endswith('review'))
    dp.register_errors_handler(error_double_send, exception=MessageNotModified)
